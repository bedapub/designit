sort(.tbl$`EV isolation date`)
sort(des_blk_tbl$`EV isolation date`) ==
sort(.tbl$`EV isolation date`)
sort(des_blk_tbl$`health status`)
sort(des_blk_tbl$`health status`) == sort(.tbl$`health status`)
dplyr::left_join(.tbl, des_blk_tbl)
variables <- rlang::quos(`health status`, `EV isolation date`)
rlang::quo_name(variables)
rlang::quo_name(!!!variables)
rlang::quo_name(!!variables)
lapply(variables, rlang::quo_name)
sapply(variables, rlang::quo_name)
res <- left_join(.tbl, des_blk_tbl)
dim(res)
res <- left_join(.tbl, des_blk_tbl, by = sapply(variables, rlang::quo_name))
dim(res)
res <- dplyr::left_join(.tbl, des_blk_tbl,
by = sapply(variables, rlang::quo_name)) %>%
dplyr::mutate(Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
dplyr::rename({{.name}} := Block)
res
View(res)
a
b
a=.tbl %>% select(`Sample ID`, `health status`, `EV isolation date`)
a
b=des_blk_tbl
b
left_join(a, b)
a=select(.tbl, x=`health status`, y=`EV isolation date`)
a
b=des_blk_tbl %>% select(x=`health status`, y=`EV isolation date`)
b
left_join(a, b)
b$y <- as.character(b$y)
a$y <- as.character(a$y)
a
b
left_join(a, b)
a == b
bind_cols(a, b)
unique(a$x)
unique(b$x)
left_join(arrange(a), arrange(b))
a==b
arrange(a) == arrange(b)
arrange(a)
arrange(b)
arrange(b, x, y)
arrange(a, x, y) == arrange(b, x, y)
left_join(arrange(a, x, y), arrange(b, x, y))
e=left_join(arrange(a, x, y), arrange(b, x, y))
tail(e)
des <- generate_blocks(d_samples, 2, `health status`, `EV isolation date`, `TMTPro label`, .name = "Plex", .prefix = "P")
des <- generate_blocks(d_samples, 2, `health status`, `EV isolation date`, .name = "Plex", .prefix = "P")
des
attributes(des)
des_blk <- attr(des, 'args.federov')
des_blk <- attr(des, 'args.block')
des_blk
x <- d_samples %>%
dplyr::select(...)
.bl
x
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`)
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`)
mt <- generate_terms(x)
# mf <- stats::as.formula(paste("~ 1 + . ^", ncol(x)))
# mt <- stats::terms.formula(mf, data = x, simplify = TRUE)
# mm <- stats::model.matrix(mt, data = x)
# mm <- mm[, estimable(mm)]
n <- nrow(x)
des <- AlgDesign::optFederov(frml = mt,
data = x,
nTrials = n,
nRepeats = 20,
args = TRUE)
if (length(k) == 1) {
r <- ceiling(n / k) # group sizes
blocksizes <- rep(r, k)
if (k * r != n) blocksizes[length(blocksizes)] <- n %% r # shorten last batch
} else if (length(k) < n) {
if (rep(seq_along(k), times = k) != n) stop("block sizes are not matching the sample size (rows of data).", call. = FALSE)
blocksizes <- k
} else if (length(k) == n) {
blocksizes <- as.vector(table(k)) # convert a full vector of batch IDs to group sizes
} else {
stop("wrong number of batches (`k`).", call. = FALSE)
}
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = des$design,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk_lst <- lapply(des_blk$Blocks, tibble::rownames_to_column, var = "OrderWithinBlock")
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithinBlock = sample(OrderWithinBlock)) %>%
dplyr::ungroup()
dim(des_blk_tbl)
des_blk_tbl
x
x <- as.data.frame(x)
a
x
rownames(x) <- d_samples$`Sample ID`
x
des <- AlgDesign::optFederov(frml = mt,
data = x,
nTrials = n,
nRepeats = 20,
args = TRUE)
des
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = des$design,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk
des$args.rows
des$args.data
des$args.args
rownames(des$args.data)
rownames(x_blk) <- rownames(des$args.data)
x_blk <- des$design
rownames(x_blk) <- rownames(des$args.data)
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = ,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = x_blk,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
ds_blk
des_blk
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`) %>%
as.data.frame()
rownames(x) %>% d_samples$`Sample ID`
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`) %>%
as.data.frame()
rownames(x) %>% d_samples$`Sample ID`
mt <- generate_terms(x)
des <- AlgDesign::optFederov(frml = mt,
data = x,
nTrials = n,
nRepeats = 20,
args = TRUE)
if (length(k) == 1) {
r <- ceiling(n / k) # group sizes
blocksizes <- rep(r, k)
if (k * r != n) blocksizes[length(blocksizes)] <- n %% r # shorten last batch
} else if (length(k) < n) {
if (rep(seq_along(k), times = k) != n) stop("block sizes are not matching the sample size (rows of data).", call. = FALSE)
blocksizes <- k
} else if (length(k) == n) {
blocksizes <- as.vector(table(k)) # convert a full vector of batch IDs to group sizes
} else {
stop("wrong number of batches (`k`).", call. = FALSE)
}
x_blk <- des$design
rownames(x_blk) <- rownames(des$args.data)
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = x_blk,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk_lst <- lapply(des_blk$Blocks, tibble::rownames_to_column, var = "OrderWithinBlock")
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithinBlock = sample(OrderWithinBlock)) %>%
dplyr::ungroup()
des_blk
ddes_blk_tbl
des_blk_tbl
des_blk_lst
rownames(x_blk) <- rownames(des$args.data)
x_blk
des$args.data
x
l
rownames(x) %>% d_samples$`Sample ID`
x
rownames(x) <- d_samples$`Sample ID`
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`) %>%
as.data.frame()
rownames(x) <- d_samples$`Sample ID`
mt <- generate_terms(x)
# mf <- stats::as.formula(paste("~ 1 + . ^", ncol(x)))
# mt <- stats::terms.formula(mf, data = x, simplify = TRUE)
# mm <- stats::model.matrix(mt, data = x)
# mm <- mm[, estimable(mm)]
n <- nrow(x)
des <- AlgDesign::optFederov(frml = mt,
data = x,
nTrials = n,
nRepeats = 20,
args = TRUE)
if (length(k) == 1) {
r <- ceiling(n / k) # group sizes
blocksizes <- rep(r, k)
if (k * r != n) blocksizes[length(blocksizes)] <- n %% r # shorten last batch
} else if (length(k) < n) {
if (rep(seq_along(k), times = k) != n) stop("block sizes are not matching the sample size (rows of data).", call. = FALSE)
blocksizes <- k
} else if (length(k) == n) {
blocksizes <- as.vector(table(k)) # convert a full vector of batch IDs to group sizes
} else {
stop("wrong number of batches (`k`).", call. = FALSE)
}
x_blk <- des$design
rownames(x_blk) <- rownames(des$args.data)
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = x_blk,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk_lst <- lapply(des_blk$Blocks, tibble::rownames_to_column, var = "OrderWithinBlock")
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithinBlock = sample(OrderWithinBlock)) %>%
dplyr::ungroup()
des_blk_tbl
des_blk_lst <- lapply(des_blk$Blocks, tibble::rownames_to_column, var = "SampleID")
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithinBlock = sample(OrderWithinBlock)) %>%
dplyr::ungroup()
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithinBlock = sample(seq_len(n()))) %>%
dplyr::ungroup()
des_blk_tbl
final <- left_join(d_samples, des_blk_tbl)
final
final <- left_join(d_samples, des_blk_tbl, by = c(`Sample ID` = SampleID))
des_blk_tbl
final <- left_join(d_samples, des_blk_tbl, by = c(`Sample ID` = "SampleID"))
final
final <- left_join(d_samples, des_blk_tbl, by = c(`Sample ID` = "SampleID", "health status", "EV isolation date"))
final
labels
labels[final$OrderWithinBlock]
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithinBlock])
final
final$`TMTPro label`
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithinBlock],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block)
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithin = sample(seq_len(n()))) %>%
dplyr::ungroup()
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithinBlock],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block)
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithin],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block)
final$OrderWithin
tibble(Plex = c("P1", "P2"), OrderWithin = 11:16)
expand.grid(Plex = c("P1", "P2"), OrderWithin = 11:16))
expand.grid(Plex = c("P1", "P2"), OrderWithin = 11:16)
expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2")) %>%
full_join()
expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2"))
bind_rows(d_controls, d_controls) %>%
bind_cols(expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2")))
bind_rows(d_controls, d_controls) %>%
bind_cols(expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2"))) %>%
full_join(final)
final <-
bind_rows(d_controls, d_controls) %>%
bind_cols(expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2"))) %>%
full_join(final) %>%
arrange(...1)
final
View(final)
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithin],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block)
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithin],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block) %>%
full_join(
bind_rows(d_controls, d_controls) %>%
bind_cols(expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2")))
) %>%
arrange(...1) %>%
select(-`10 POSSIBLE LABELS`)
final
View(final)
write_excel_csv(final, "sample_order.csv")
plot_design(final, Plex)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro labels`, .batch2 = Plex)
final$Plex
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro labels`, .batch2 = Plex)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro labels`, .batch2 = Plex)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = Plex)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro label`, .batch2 = Plex)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro label`, .batch2 = `Plex`)
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro label`)#, .batch2 = Plex)
devtools::load_all(".")
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro label`, .batch2 = Plex)
traceback()
plot_design(final, `health status`, `EV isolation date`,
.batch1 = `TMTPro label`, .batch2 = Plex)
devtools::load_all(".")
plot_design(final, `TMTPro label`, Plex, `health status`, `EV isolation date`)
final$Plex
plot_design(final, .color = `TMTPro label`, .transparency = Plex, `health status`, `EV isolation date`)
plot_design(final, .color = `TMTPro label`, .transparency = Plex, final$`health status`, final$`EV isolation date`)
devtools::load_all(".")
plot_design(final, .color = `TMTPro label`, .transparency = Plex, final$`health status`, final$`EV isolation date`)
devtools::load_all(".")
plot_design(final, .color = `TMTPro label`, .transparency = Plex, final$`health status`, final$`EV isolation date`)
devtools::load_all(".")
plot_design(final, .color = `TMTPro label`, .transparency = Plex, final$`health status`, final$`EV isolation date`)
devtools::load_all(".")
plot_design(final, .color = `TMTPro label`, .transparency = Plex, final$`health status`, final$`EV isolation date`)
plot_design(final, .color = `TMTPro label`, .transparency = Plex, `health status`, `EV isolation date`)
devtools::load_all(".")
plot_design(final, .color = `TMTPro label`, .transparency = Plex, `health status`, `EV isolation date`)
plot_design(final, .color = `TMTPro label`, `health status`, `EV isolation date`)
plot_design(final, .color = `TMTPro label`, .alpha = Plex, `health status`, `EV isolation date`)
plot_design(final, .color = Plex `health status`, `EV isolation date`)
plot_design(final, .color = Plex, `health status`, `EV isolation date`)
k <- 2
.name = "Plex"
.prefix = "P"
x <- d_samples %>%
dplyr::select(`health status`, `EV isolation date`) %>%
as.data.frame()
rownames(x) <- d_samples$`Sample ID`
mt <- generate_terms(x)
# mf <- stats::as.formula(paste("~ 1 + . ^", ncol(x)))
# mt <- stats::terms.formula(mf, data = x, simplify = TRUE)
# mm <- stats::model.matrix(mt, data = x)
# mm <- mm[, estimable(mm)]
n <- nrow(x)
des <- AlgDesign::optFederov(frml = mt,
data = x,
nTrials = n,
nRepeats = 20,
args = TRUE)
if (length(k) == 1) {
r <- ceiling(n / k) # group sizes
blocksizes <- rep(r, k)
if (k * r != n) blocksizes[length(blocksizes)] <- n %% r # shorten last batch
} else if (length(k) < n) {
if (rep(seq_along(k), times = k) != n) stop("block sizes are not matching the sample size (rows of data).", call. = FALSE)
blocksizes <- k
} else if (length(k) == n) {
blocksizes <- as.vector(table(k)) # convert a full vector of batch IDs to group sizes
} else {
stop("wrong number of batches (`k`).", call. = FALSE)
}
x_blk <- des$design
rownames(x_blk) <- rownames(des$args.data)
des_blk <- AlgDesign::optBlock(frml = mt,
withinData = x_blk,
blocksizes = blocksizes,
nRepeats = 100,
args = TRUE)
des_blk_lst <- lapply(des_blk$Blocks, tibble::rownames_to_column, var = "SampleID")
des_blk_tbl <- dplyr::bind_rows(des_blk_lst, .id = "Block") %>%
dplyr::group_by(Block) %>%
dplyr::mutate(OrderWithin = sample(seq_len(n()))) %>%
dplyr::ungroup()
final <- left_join(d_samples, des_blk_tbl,
by = c(`Sample ID` = "SampleID", "health status", "EV isolation date")) %>%
mutate(`TMTPro label` = labels[OrderWithin],
Block = stringr::str_c(.prefix,
stringr::str_remove(Block, "B")
)
) %>%
rename({{.name}} := Block) %>%
full_join(
bind_rows(d_controls, d_controls) %>%
bind_cols(expand.grid(OrderWithin = 11:16, Plex = c("P1", "P2")))
) %>%
arrange(...1) %>%
select(-`10 POSSIBLE LABELS`)
plot_design(final, .color = Plex, `health status`, `EV isolation date`)
write_excel_csv(final, "sample_order.csv")
write_excel_csv(final %>% select(-...1), "sample_order.csv")
sign
a <- readxl::read_excel('/pstore/data/bioinfo/users/julienla/Project/RNAseqAnalysis/CEA-CIT/CEA-PRIT_CEAmodels_for randomization.xlsx')
summary(mtcars)
glance(mtcars)
dplyr::glimpse(mtcars)
?warning
irix
irs
iris
iris %>% summarize_all()
library(tidyverse)
iris
iris %>% summarize_all()
iris %>% summarize_all(~sum)
iris %>% summarize_all("mean")
iris %>% summarize_all(~recode(mean(.), .missing = "All"))
iris %>% summarize_all(~recode(mean(.), .default = ~as.character(.), .missing = "All"))
iris %>% summarize_all(~replace_na(mean(.), "All"))
iris %>% group_by(Species) %>% summarize_all(~replace_na(mean(.), "All"))
iris %>% group_by(Species) %>% summarize_all(~replace_na(mean(.), "All")) %>% ungroup() %>% summarize_all(~replace_na(mean(.), "All"))
iris %T>% group_by(Species) %>% summarize_all(~replace_na(mean(.), "All")) %T>% summarize_all(~replace_na(mean(.), "All"))
library(magrittr)
iris %T>% group_by(Species) %>% summarize_all(~replace_na(mean(.), "All")) %T>% summarize_all(~replace_na(mean(.), "All"))
?`%T>%`
funs <- funs(mean)
list(mean, median)
funs=list(mean, median)
mtcars
mtcars %>% group_by(gear, carb)
bind_rows(mtcars, mtcars %>% group_by(gear, carb))
mtcars %>% mutate_at(vars(cyl, gear, carb), "NA")
mtcars %>% mutate_at(vars(cyl, gear, carb), ~"NA")
mtcars %>% mutate_at(vars(cyl, gear, carb), ~"All")
for (i in vars(cyl, gear, carb)) mtcars %>% mutate_at(i, ~"All")
for (i in c(cyl, gear, carb)) mtcars %>% mutate_at(vars(i), ~"All")
for (i in c("cyl", "gear", "carb")) mtcars %>% mutate_at(vars(i), ~"All")
lapply(c("cyl", "gear", "carb"), function(i) mtcars %>% mutate_at(vars(i), ~"All"))
lapply(c("cyl", "gear", "carb"), function(i) mtcars %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
mtcars %>% mutate_at(vars(cyl, gear, carb), factor)
mtcars2 <- mtcars %>% mutate_at(vars(cyl, gear, carb), factor)
lapply(c("cyl", "gear", "carb"), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(c("cyl", "gear", "carb", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(c("cyl", "gear", "carb", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows() %>% tail()
lapply(c("cyl", "gear", "carb", list("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(c("cyl", "gear", "carb", list("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows() %>% tail()
mtcars %>% mutate_at(vars(cyl, gear, carb), ~"All")
lapply(c("cyl", "gear", "carb", list("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows() %>% tail()
lapply(c(list("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows() %>% tail()
lapply(c(list("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
mtcars %>% mutate_at(vars("cyl", "gear", "carb"), ~"All")
mtcars %>% mutate_at(vars(list("cyl", "gear", "carb")), ~"All")
mtcars %>% mutate_at(vars(c("cyl", "gear", "carb")), ~"All")
lapply(list(c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(list("cyl", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(list("cyl", "gear", "carb", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
lapply(list("cyl", "gear", "carb", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows() %>% tail()
mtcars3 <- lapply(list("cyl", "gear", "carb", c("cyl", "gear", "carb")), function(i) mtcars2 %>% mutate_at(vars(i), ~"All")) %>% bind_rows()
mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(mean)
mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(mean) %>% arrange(cyl, gear, carb)
mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(mean) %>% arrange(desc(cyl), desc(gear), desc(carb))
mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(mean)
mtmean <- mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(mean)
View(mtmean)
View(mtcars3)
View(mtmean)
mtsum <- mtcars3 %>% group_by(cyl, gear, carb) %>% summarize_all(sum)
View(mtsum)
devtools::install_dev_deps()
library(knitr)
library(openxlsx)
library(designit)
library(DesignIt)
install.packages(c('shinymeta', 'AlgDesign'))
install.packages('shinymeta')
installr::updateR()
install.packages('yaml')
install.packages('shinymeta')
install.packages('Rtools')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
