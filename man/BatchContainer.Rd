% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_container.R
\name{BatchContainer}
\alias{BatchContainer}
\title{R6 Class representing a batch container.}
\description{
Describes container dimensions and samples to container location assignment.
}
\details{
A typical workflow starts with creating a \code{BatchContainer}. Then
samples can be assigned to locations in that container.
}
\examples{

## ------------------------------------------------
## Method `BatchContainer$new`
## ------------------------------------------------

bc <- BatchContainer$new(
  dimensions = list(
    "plate" = 3,
    "row" = list(values = letters[1:3]),
    "column" = list(values = c(1, 3))
  ),
  exclude = data.frame(plate = 1, row = "a", column = c(1, 3), stringsAsFactors = F)
)

bc
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{scoring_f}}{Main scoring function used for optimization.
Scoring function should receive a \code{data.table} with columns from
the samples \code{data.frame}, locations \code{data.frame}, and
\code{.sample_id} column. This function should return a floating
point score value for the assignment.}

\item{\code{aux_scoring_f}}{Additional scoring functions to compute.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{n_locations}}{Returns number of available locations in a \code{BatchContainer}.
This field cannot be assigned.}

\item{\code{n_excluded}}{Returns number of excluded locations in a \code{BatchContainer}.
This field cannot be assigned.}

\item{\code{n_available}}{Returns number of available locations in a \code{BatchContainer}.
This field cannot be assigned.}

\item{\code{n_dimension}}{Returns number of dimensions in a \code{BatchContainer}.
This field cannot be assigned.}

\item{\code{dimension_names}}{\code{character} vector with dimension names.
This field cannot be assigned.}

\item{\code{locations_df}}{Get a \code{tibble} with all the locations in a \code{BatchContainer}.
This field cannot be assigned.}

\item{\code{exclude}}{Get or set excluded locations in the \code{BatchContainer}.}

\item{\code{samples_df}}{Samples in the batch container.
When assigning data.frame should not have column named .sample_id column.}

\item{\code{samples_dt}}{Sample assignment \code{data.table}.
This data.table includes columns for all the \code{BatchContainer}
locations, all the samples and a \code{".sample_id"} column.

The most efficient way of updating this \code{data.table} is using
the \code{BatchContainer$exchange_samples()} method.}

\item{\code{assignment_vec}}{Sample assignment vector. Should contain NAs for empty locations.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BatchContainer$new()}}
\item \href{#method-has_samples}{\code{BatchContainer$has_samples()}}
\item \href{#method-get_samples}{\code{BatchContainer$get_samples()}}
\item \href{#method-exchange_samples}{\code{BatchContainer$exchange_samples()}}
\item \href{#method-score}{\code{BatchContainer$score()}}
\item \href{#method-print}{\code{BatchContainer$print()}}
\item \href{#method-clone}{\code{BatchContainer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new BatchContainer object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$new(dimensions, exclude = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dimensions}}{A vector or list of dimensions. Every dimension
should have a name. Could be an integer vector of dimensions or
a named list. Every value of a list could be either dimension size
or parameters for \code{BatchContainerDimension$new()}.}

\item{\code{exclude}}{\code{data.frame} with excluded locations of a container.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{bc <- BatchContainer$new(
  dimensions = list(
    "plate" = 3,
    "row" = list(values = letters[1:3]),
    "column" = list(values = c(1, 3))
  ),
  exclude = data.frame(plate = 1, row = "a", column = c(1, 3), stringsAsFactors = F)
)

bc
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has_samples"></a>}}
\if{latex}{\out{\hypertarget{method-has_samples}{}}}
\subsection{Method \code{has_samples()}}{
Returns TRUE if batch has samples.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$has_samples()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_samples"></a>}}
\if{latex}{\out{\hypertarget{method-get_samples}{}}}
\subsection{Method \code{get_samples()}}{
Return table with samples and sample assignment.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$get_samples(
  assignment = TRUE,
  include_id = FALSE,
  remove_empty_locations = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{assignment}}{Return sample assignment. If FALSE, only
samples table is returned, with out batch assignment.}

\item{\code{include_id}}{Keep .sample_id in the tibble.}

\item{\code{remove_empty_locations}}{Removes empty locations
from the result tibble.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
tibble with samples and sample assignment.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-exchange_samples"></a>}}
\if{latex}{\out{\hypertarget{method-exchange_samples}{}}}
\subsection{Method \code{exchange_samples()}}{
Exchange samples between locations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$exchange_samples(src, dst)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{src}}{integer vector of source locations}

\item{\code{dst}}{integer vector of destination locations (the same length as \code{src}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{BatchContainer}, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-score"></a>}}
\if{latex}{\out{\hypertarget{method-score}{}}}
\subsection{Method \code{score()}}{
Score current sample assignment,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$score(aux = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{aux}}{compute auxiliary scoring functions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
In case \code{aux} is FALSE returns the value of the main scoring function.
Otherwise a vector of all scoring functions starting from the first one.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints information about \code{BatchContainer}.
List of BatchContainerDimension elements.
Tibble with excluded locations.
Tibble with sample information and sample ids.
Tibble with sample ids and assignment to batch container locations.
Cached data.table with samples assignment.
Validate sample assignment.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchContainer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
